generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ChatUser {
  id         String @id @default(uuid()) @db.Uuid
  authUserId String @unique @db.Uuid

  ownedChannels      Channel[]              @relation("Channel_owner")
  channels           ChannelMember[]        @relation("ChannelMember_member")
  messages           ChannelMessage[]       @relation("ChannelMessage_member")
  channelInvitations ChannelInvitation[]    @relation("ChannelInvitation_member")
  dmChannel1         DMChannelAssociation[] @relation("DMChannelAssociation_member1")
  dmChannel2         DMChannelAssociation[] @relation("DMChannelAssociation_member2")
  dmChannelInfoFrom  DMChannelInfo[]        @relation("DMChannelInfo_from")
  dmChannelInfoTo    DMChannelInfo[]        @relation("DMChannelInfo_to")
  dmMessage          DMMessage[]            @relation("DMMessage_member")
}

model Channel {
  id                 String   @id @default(uuid()) @db.Uuid
  title              String
  isPublic           Boolean
  password           String?
  createdAt          DateTime @default(now())
  lastActiveAt       DateTime @default(now())
  ownerId            String?  @db.Uuid
  memberCount        Int      @default(0)
  maximumMemberCount Int

  owner ChatUser? @relation("Channel_owner", fields: [ownerId], references: [id])

  members           ChannelMember[]     @relation("ChannelMember_channel")
  messages          ChannelMessage[]    @relation("ChannelMessage_channel")
  ChannelInvitation ChannelInvitation[] @relation("ChannelInvitation_channel")

  @@index([isPublic, memberCount])
  @@index([isPublic, title])
  @@index([isPublic, createdAt])
  @@index([isPublic, lastActiveAt])
}

enum ChannelMemberType {
  ADMINISTRATOR
  MEMBER
  BANNED
}

model ChannelMember {
  channelId  String            @db.Uuid
  memberId   String            @db.Uuid
  memberType ChannelMemberType
  mutedUntil DateTime          @default(now())

  channel Channel  @relation("ChannelMember_channel", fields: [channelId], references: [id])
  member  ChatUser @relation("ChannelMember_member", fields: [memberId], references: [id])

  @@id([channelId, memberId]) // @@id([channelId, memberType, memberId])에서 memberType 탈락
  @@index([memberId, channelId])
}

model ChannelMessage {
  id          String   @id @default(uuid()) @db.Uuid
  channelId   String   @db.Uuid
  memberId    String   @db.Uuid
  sentAt      DateTime @default(now())
  messageJson String

  channel Channel  @relation("ChannelMessage_channel", fields: [channelId], references: [id])
  member  ChatUser @relation("ChannelMessage_member", fields: [memberId], references: [id])

  @@index([channelId, sentAt])
}

model ChannelInvitation {
  channelId String   @db.Uuid
  memberId  String   @db.Uuid
  invitedAt DateTime @default(now())

  channel Channel  @relation("ChannelInvitation_channel", fields: [channelId], references: [id])
  member  ChatUser @relation("ChannelInvitation_member", fields: [memberId], references: [id])

  @@id([channelId, memberId])
  @@index([channelId, invitedAt])
}

// member1Id must be smaller than member2Id
model DMChannelAssociation {
  id        String @id @default(uuid()) @db.Uuid
  member1Id String @db.Uuid
  member2Id String @db.Uuid

  member1 ChatUser @relation("DMChannelAssociation_member1", fields: [member1Id], references: [id])
  member2 ChatUser @relation("DMChannelAssociation_member2", fields: [member2Id], references: [id])

  channelInfo DMChannelInfo[] @relation("DMChannelInfo_channel")
  DMMessage   DMMessage[]     @relation("DMMessage_channel")

  @@unique([member1Id, member2Id])
}

model DMChannelInfo {
  fromId    String @db.Uuid
  toId      String @db.Uuid
  channelId String @default(uuid()) @db.Uuid
  name      String

  from    ChatUser             @relation("DMChannelInfo_from", fields: [fromId], references: [id])
  to      ChatUser             @relation("DMChannelInfo_to", fields: [toId], references: [id])
  channel DMChannelAssociation @relation("DMChannelInfo_channel", fields: [channelId], references: [id])

  @@id([fromId, toId])
  @@index([fromId, name])
}

model DMMessage {
  id          String   @id @default(uuid()) @db.Uuid
  channelId   String   @db.Uuid
  memberId    String   @db.Uuid
  sentAt      DateTime @default(now())
  messageJson String

  channel DMChannelAssociation @relation("DMMessage_channel", fields: [channelId], references: [id])
  member  ChatUser             @relation("DMMessage_member", fields: [memberId], references: [id])

  @@index([channelId, sentAt])
}
